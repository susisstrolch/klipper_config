##### AUTOCREATED BY KIAUH #####
# [include kiauh_macros.cfg]
[save_variables]
filename: /home/debian/klipper_config/printer_2/savedVariables.cfg

# Arduino aliases for atmega2560/1280 (Arduino mega) boards
[board_pins]
aliases:
    # Common EXP1 header found on many "all-in-one" ramps clones
    EXP1_1=PC0, EXP1_3=PH0, EXP1_5=PA1, EXP1_7=PA5, EXP1_9=<GND>,
    EXP1_2=PC2, EXP1_4=PH1, EXP1_6=PA3, EXP1_8=PA7, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB3, EXP2_3=PC6, EXP2_5=PC4, EXP2_7=PL0, EXP2_9=<GND>,
    EXP2_2=PB1, EXP2_4=PB0, EXP2_6=PB2, EXP2_8=PG0, EXP2_10=<RST>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi"
    # Note, some boards wire: EXP2_8=<RST>, EXP2_10=PG0

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0
baud: 250000
restart_method: arduino

# Blue Pill with ADXL345
#[include adxl345.cfg]

[pause_resume]
recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

[display_status]

[virtual_sdcard]
path: ~/virtual_sdcard

[gcode_arcs]
resolution: 0.1

# X
[stepper_a]
step_pin: PF0
dir_pin: PF1
enable_pin: !PD7
microsteps: 32
rotation_distance: 55
endstop_pin: ^!PE5
homing_speed: 50
# from Marlin:
# position_endstop: 208.86 # Haydn MagBalls
# arm_length: 292.0700 # Haydn MagBalls: 288.13
#position_endstop: 208.86 # Haydn MagBalls
#arm_length: 292.07 # Haydn MagBalls

#Y
[stepper_b]
step_pin: PF6
dir_pin: PF7
enable_pin: !PF2
microsteps: 32
rotation_distance: 55
endstop_pin: ^!PJ1

#Z
[stepper_c]
step_pin: PL3
dir_pin: PL1
enable_pin: !PK1
microsteps: 32
rotation_distance: 55
endstop_pin: ^!PK4

[thermistor Trianglelab NTC100K B3950]
## values calibrated against a PT100 reference
temperature1: 25.0
resistance1: 103180.0
temperature2: 150.0
resistance2: 1366.2
temperature3: 250.0
resistance3: 168.6

[thermistor Chinese NTC100K B3950]
## values from datasheet
temperature1: 25.0
resistance1: 100000.0
temperature2: 100.0
resistance2: 6671
temperature3: 150.0
resistance3: 1750

[extruder]
step_pin: PA4
dir_pin: !PA6     # BMG (left)
enable_pin: !PA2
rotation_distance: 22.727 # 23.056 # Calculated distance
microsteps: 32
full_steps_per_rotation: 200
gear_ratio: 50:17 # BMG gear ratio
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB4
sensor_pin: PK5
#   One of "EPCOS 100K B57560G104F", "ATC Semitec 104GT-2",
#   "NTC 100K beta 3950", "Honeywell 100K 135-104LAG-J01",
#   "NTC 100K MGB18-104F39050L32", "SliceEngineering 450", or
#   "TDK NTCG104LH104JT1"
#sensor_type: NTC 100K beta 3950
sensor_type: Trianglelab NTC100K B3950
min_temp: 0
max_temp: 300
pressure_advance = 0.2  # PETG
max_extrude_only_velocity: 70
max_extrude_only_accel: 3000
max_extrude_only_distance = 700
# control = pid
# pid_kp = 21.203
# pid_ki = 1.208
# pid_kd = 93.029

[firmware_retraction]
retract_length: 1.5
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated (but see
#   unretract_extra_length below). The default is 0 mm.
#retract_speed: 25
#   The speed of retraction, in mm/s. The default is 20 mm/s.
#unretract_extra_length: 0
#   The length (in mm) of *additional* filament to add when
#   unretracting.
#unretract_speed: 25
#   The speed of unretraction, in mm/s. The default is 10 mm/s.

[heater_bed]
# SusisStrolch: sandwich bed
# cork / aluminium bed 100W@12V / borosilicate / pertinax
heater_pin: PC1
sensor_pin: PK0
sensor_type: Chinese NTC100K B3950
min_temp: 0
max_temp: 130
control = pid
# classic PID - after PID calibration
# pid_kp = 64.914
# pid_ki = 2.792
# pid_kd = 377.314
# "no overshoot" - divide the recommended Kp by 3, divide Ki by 3, and multiply Kd by 0.88 - #4427
pid_kp = 21.638
pid_ki = 0.9307
pid_kd = 332.0363

[printer]
kinematics: delta
max_velocity: 350
max_z_velocity: 200
# from TEST_RESONANCE...
max_accel: 4400
max_accel_to_decel: 2200
# from MARLIN
# delta_radius: 110.211
#delta_radius: 110.211
print_radius: 105.00
minimum_z_position: -5

[delta_calibrate]
radius: 90
speed: 50
horizontal_move_z: 20
# manual_probe: false
#   If true, then DELTA_CALIBRATE will perform manual probing. If
#   false, then a PROBE command will be run at each probe
#   point. Manual probing is accomplished by manually jogging the Z
#   position of the print head at each probe point and then issuing a
#   NEXT extended g-code command to record the position at that
#   point. The default is false if a [probe] config section is present
#   and true otherwise.

[probe]
pin: PK6
z_offset: 0.0
speed: 15.0
samples: 5
#sample_retract_dist: 2.0
#lift_speed: 3.0
samples_result: median
#   "median" or "average". The default is average.
samples_tolerance: 0.1
samples_tolerance_retries: 5

[bed_mesh]
speed: 25.0
horizontal_move_z: 5
mesh_radius: 70
mesh_origin: 0,0
# for lagrange probe_count <=6
round_probe_count: 5
fade_start: 1
fade_end: 0 # 0: fade of
#fade_target: 0.0
# Algorithm: "lagrange" or "bicubic"
#algorithm: bicubic
#bicubic_tension: 0.2
#split_delta_z: .025
move_check_distance: 5
#relative_reference_index:
#   A point index in the mesh to reference all z values to. Enabling
#   this parameter produces a mesh relative to the probed z position
#   at the provided index.
#faulty_region_1_min:
#faulty_region_1_max:
#   Optional points that define a faulty region.  See docs/Bed_Mesh.md
#   for details on faulty regions.  Up to 99 faulty regions may be added.
#   By default no faulty regions are set.

[fan]
pin: PH5

[controller_fan default_controller_fan]
pin: PH6

[display]
lcd_type: uc1701
contrast: 55
cs_pin: PA7
a0_pin: PA5
encoder_pins: ^!PH1, ^!PH0
encoder_steps_per_detent: 2
# encoder_fast_rate: 0.1
click_pin: ^!PA1
#kill_pin: ^!PD1


#[gcode_button test_ph0]
#pin: ^!PH0
#press_gcode: {action_respond_info("pin PH0  press")}
#release_gcode: {action_respond_info("pin PH0  release")}

#[gcode_button test_ph1]
#pin: ^!PH1
#press_gcode: {action_respond_info("pin PH1 press")}
#release_gcode: {action_respond_info("pin PH1  release")}

[output_pin BEEPER]
pin: PH3
pwm: True
value: 0
shutdown_value: 0
scale: 100

[output_pin LED]
pin: PH4
pwm: True
value: 0
shutdown_value: 0

### Macros
[gcode_macro PRINT_STR]
gcode:
  M117 {params.STR}
  { action_respond_info(params.STR) }

# --- 
# keep mainsail happy...
[gcode_macro PAUSE]
rename_existing: BUILDIN_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = 0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    {%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
    {%set act_extrude_temp = printer.extruder.temperature|int %}
    ##### end of definitions #####
    BUILDIN_PAUSE
    G91
    {% if act_extrude_temp > min_extrude_temp %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 

[gcode_macro RESUME]
rename_existing: BUILDIN_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    {%set min_extrude_temp = printer.configfile.settings["extruder"]["min_extrude_temp"]|int %}
    {%set act_extrude_temp = printer.extruder.temperature|int %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if act_extrude_temp > min_extrude_temp %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    BUILDIN_RESUME {get_params}

[gcode_macro CANCEL_PRINT]
rename_existing: BUILDIN_CANCEL_PRINT
gcode:
  M220 S100 ; Reset Speed factor override percentage to default (100%)
  M221 S100 ; Reset Extrude factor override percentage to default (100%)
  SAVE_GCODE_STATE NAME=CANCEL_PRINT_state
  G91 ; Set coordinates to relative
  {% if printer.extruder.temperature >= 170 %}
    G92 E0       ; Reset extruder
    G1 F1200 E-1 ; Retract filament 3 mm to prevent oozing
  {% endif %}

  ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
  {% if printer.toolhead.homed_axes == "xyz" %}
    G1 F6000 Z10 ; Move Z Axis up 10 mm to allow filament ooze freely
    M84 ; Disable stepper motors
  {% endif %}
  RESTORE_GCODE_STATE NAME=CANCEL_PRINT_state
  M106 S0  ;set part fan speed to zero.
  ;bed and hotend are left at the print temps in case I want to restart.
  SET_PIN PIN=LED VALUE=0.5

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro LOAD_MESH_TEMP]
gcode:
  {% set BED_TEMPERATURE = params.BED_TEMPERATURE|default(0)|float %}
  {% set FORCE = params.FORCE|default(0)|float %}
    {printer.gcode.action_respond_info("- AUTOMATED BED MESH GENERATOR -")}
    {% if BED_TEMPERATURE|int < 30 %}
        {printer.gcode.action_respond_info("Your bed temp is to low, make sure it is at least 30 or higher")}
    {% else %}
        {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 0 %}
            G28 #remove line if you ran G28 before starting this macro
            BED_MESH_PROFILE LOAD={BED_TEMPERATURE}
            {printer.gcode.action_respond_info("Succesfully loaded bed_mesh "+ BED_TEMPERATURE)}
        {% else %}
            {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 1 %}
                BED_MESH_PROFILE REMOVE={BED_TEMPERATURE}
            {% endif %}
            {printer.gcode.action_respond_info("bed_mesh not defined, your bed temperature will go up!")}
            {printer.gcode.action_respond_info("We will probe the bed and save the mesh as bed_mesh "+ BED_TEMPERATURE)}
            ADD_BED_MESH TARGET_TEMP={BED_TEMPERATURE}
        {% endif %}
    {% endif %}

[gcode_macro ADD_BED_MESH]
gcode:
    {% set TARGET_TEMP = params.TARGET_TEMP|default(30)|float %}
    M190 S{TARGET_TEMP} # Wait for the bed to hit TARGET_TEMP
    G28 #remove line if you ran G28 before starting this macro
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={TARGET_TEMP}

[gcode_macro PREHEAT]
gcode:
    {% set T_BED = params.T_BED|default(0)|float %}
    {% set T_TOOL = params.T_TOOL|default(200)|float %}
    {% if T_BED > 20.0 %}
      PRINT_STR STR="PREHEAT T_BED={T_BED}"
      M190 S{T_BED}
      PRINT_STR STR="HEAT_SOAK DURATION={ T_BED * 2 }s"
      # HEAT_SOAK DURATION={ T_BED * 2 }
      G4 P{ T_BED * 2 * 1000 }
      M400
    {% endif %}
    PRINT_STR STR="PREHEAT T_TOOL={T_TOOL}"
    M109 S{T_TOOL}
    PRINT_STR STR="PREHEAT done"

[gcode_macro PREHEAT_PLA]
gcode:
    PREHEAT T_BED=65 T_TOOL=210

[gcode_macro PREHEAT_PETG]
gcode:
    PREHEAT T_BED=70 T_TOOL=230

# ***********************************************
# * User implemented g-code macros
# ***********************************************
[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %}
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}

    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}

    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
        { action_respond_info("Loading gcode offsets from saved variables [%s]" % (offsets)) }
        _SET_GCODE_OFFSET {% for axis, offset in offsets.items()
            if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
    {% endif %}|


# ***********************
# setting for a delta printer
# ***********************
[gcode_macro START_PRINT]
gcode:
  {% set T_TOOL = params.T_TOOL|default(200)|float %}
  {% set T_BED = params.T_BED|default(65)|float %}
  {% set FAN_SPEED = params.FAN_SPEED|default(25)|float %}
  {% set PRIMELINE = params.PRIMELINE|default(0)|float %}

  UPDATE_DELAYED_GCODE ID=LOAD_GCODE_OFFSETS DURATION=0.1
  G0 F3600
  G92 E0
  SAVE_GCODE_STATE NAME=START_state
  PRINT_STR STR="startup procedure"
  M355 S0.5
# PRINT_STR STR="loading mesh"
# BED_MESH_PROFILE LOAD="deltaCalibration"
  PRINT_STR STR="heating..."
  CLEAR_PAUSE
  M140 S{T_BED}
  M106 S255     ; run cooling fans at full power
  PARK
  
  PREHEAT T_BED={T_BED} T_TOOL={T_TOOL}
   {% if PRIMELINE > 0 %}
    PRIME_LINE
  {% else %}
    WIPE
  {% endif %}

  M106 S{FAN_SPEED}

  RESTORE_GCODE_STATE NAME=START_state
  G92 E0
  PAdvance_On
  
  M355 S1.0
  PRINT_STR STR="start printing"

# HEAT_SOAK and companions - heated bed temp distribution
[gcode_macro HEAT_SOAK]
gcode:
  {% set DURATION = params.DURATION|default(180)|float %}
  PRINT_STR STR="HEAT_SOAK DURATION={DURATION}s"
  UPDATE_DELAYED_GCODE ID=SOAK_TIME DURATION={DURATION}  ; resume after DURATION seconds
  BUILDIN_PAUSE
  M117

[gcode_macro SKIP_HEAT_SOAK]
gcode:
  PRINT_STR STR="SKIP_HEAT_SOAK"
  UPDATE_DELAYED_GCODE ID=SOAK_TIME DURATION=0.1

[delayed_gcode SOAK_TIME]
gcode:
  PRINT_STR STR="SOAK_TIME"
  BUILDIN_RESUME
  M107    ; turn off cooling fans

# drop a blob at current position
# Parameter:
#   HEIGHT: layer height
#   LENGTH: total purge amount (mm)
#
[gcode_macro WIPE]
gcode:
  {% set PURGE_HEIGHT = params.HEIGHT|default(0.25)|float %}
  {% set PURGE_LENGTH = params.LENGTH|default(30)|float %}

  {% set y = printer.toolhead.axis_maximum.y * 0.95  %}
  {% set y1 = printer.toolhead.axis_maximum.y *0.92  %}
  
  SAVE_GCODE_STATE NAME=WIPE_state
  PRINT_STR STR="wiping nozzle..."

  G1 X-5 Y-{y} Z0.5 F18000
  G92 E0
  G1 E20 F100
  G1 Z5 E10 F100
  G4 P2000
  G1 X-20 Y-{y1} Z25 F18000
  RESTORE_GCODE_STATE NAME=WIPE_state
  {% set tp = printer.toolhead.position %}
  PRINT_STR STR={tp}
  {% set tg = printer.gcode_move.position %}
  PRINT_STR STR={tg}
    
# print an ARC prime line (Delta, eliptic printbed)
# Parameter:
#   HEIGHT: layer height
#   DISTANCE: distance to bed border
#   OFFSET: distance between the two prime lines
#   LENGTH: total purge amount (mm)
#
[gcode_macro PRIME_LINE]
gcode:
  {% set PURGE_HEIGHT = params.HEIGHT|default(0.25)|float %}
  {% set PURGE_DIST = params.DISTANCE|default(5)|float %}
  {% set PURGE_OFFSET = params.OFFSET|default(0.5)|float %}
  {% set PURGE_LENGTH = params.LENGTH|default(30)|float %}

  {% set x1 = printer.toolhead.axis_maximum.x - PURGE_DIST  %}
  {% set x2 = x1 - PURGE_OFFSET %}

  SAVE_GCODE_STATE NAME=PRIME_LINE_state
  PRINT_STR STR="Printing prime line"

  G92 E0
  G0 X-{x1} Y0 Z{PURGE_HEIGHT} F3600
  G3 X{x1} Y0 I{x1} J0 E{PURGE_LENGTH / 2}
  G0 X{x2}
  G2 X-{x2} Y0 I-{x2} J0 E{PURGE_LENGTH / 2}

  RESTORE_GCODE_STATE NAME=PRIME_LINE_state

# park the nozzle
[gcode_macro PARK]
gcode:
  {% set X = printer.toolhead.axis_maximum.x * 0.95  %}
  {% set Z = params.Z|default(0)|float %}

  SAVE_GCODE_STATE NAME=PARK_state
  PRINT_STR STR="Park: homed axes: [{printer.toolhead.homed_axes}]"
  {% if 'z' not in printer.toolhead.homed_axes %}
     M117 Homing print head
     G28
  {% endif %}
  M117 Parking print head
  {% if Z|float>0 %}
     setRelPos
     G1 Z{Z|float}
     setAbsPos
     G1 X-{X} Y0 F3600
  {% else %}
     setAbsPos
     G0 X-{X} Y0 Z80 F3600
  {% endif %}
  RESTORE_GCODE_STATE NAME=PARK_state
  M400

[gcode_macro END_PRINT]
gcode:
  THE_END

[gcode_macro THE_END]
gcode:
    TURN_OFF_HEATERS    ;turn off heaters...
    SAVE_GCODE_STATE NAME=END_state
    M83                 ;set relative extrusion
    G92 E0              ;reset extrusion amount
    M204 S10000         ;set max acceleration
    G1 E-2 F4000        ;retract 2mm
    M204 S3000          ;set max acceleration
    STORE_GCODE_STATE NAME=END_state

    ;move the toolhead out of the way
    ;if the tool is less than 30mm away from Z Max, move it to Z max, otherwise, move Z up 30mm

    ;Obtain the Z axis limit from the [stepper_z] section of the config file and make
    ;  a decision where to move the Z axis based on the current toolhead
    {% if printer.toolhead.position.z|float + 30 >= printer.toolhead.axis_maximum.z|float %}
    setAbsPos
    G1 Z{printer.toolhead.axis_maximum.z|float} F1000 ;Move tool
    {% else %}
    setRelPos
    G1 Z30 F1000         ;move Z axis up 30mm
    {% endif %}

    RESTORE_GCODE_STATE NAME=END_state
    G1 X0 Y{printer.toolhead.axis_maximum.y} F24000    ;park tool at back of printer
    M107
    #UNLOAD_FILAMENT     ;this is a good spot to call an unload
                         ;filament macro, if you are into that sort of thing
    # SET_GCODE_OFFSET Z=0 ;reset whatever babystepping you have done
    M84                  ;disable motors
    CLEAR_PAUSE          ;clear whatever PAUSE state you may have if you have it
    M117 DONE!!!         ;print a message on your LCD
    SET_PIN PIN=LED VALUE=0.0

[gcode_macro M600]
default_parameter_Z: 80
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=7200
  PAUSE
  setRelPos
  G11
  G1 E3.8
  setAbsPos
  PARK Z={printer.toolhead.position.z + Z|float}
  M117 Filament change. Waiting user interaction

[gcode_macro LOAD_FILAMENT]
gcode:
    M701

[gcode_macro M701]
default_parameter_E: 500
gcode:
  M117 Loading filament
  M83
  G1 E{E} F1200
  M106 S255
  M400
  G1 E50 F300
  M400
  G1 E50 F300
  M400
  G11
  G1 E3.8
  M82
  #G92 E0
  M117 Load completed
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M702

[gcode_macro M702]
default_parameter_E: 500
gcode:
  M117 Unloading filament
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
  M83
  G11
  G1 E-{E} F1200
  M400
  M82
  #G92 E0
  M117 Unload completed


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  { action_respond_info("CANCEL_PRINT") }
    TURN_OFF_HEATERS
    SDCARD_RESET_FILE
    CLEAR_PAUSE
    BASE_CANCEL_PRINT
    G28

# **********************
# tools....
# **********************

[gcode_macro setAbsPos]
gcode:
  { action_respond_info("Set to Absolute Positioning...") }
  G90

[gcode_macro setRelPos]
gcode:
  { action_respond_info("Set to Relative Positioning...") }
  G91

[gcode_macro Power_Off]
gcode: { action_call_remote_method("set_device_power",
  device="DVES_15946B-5227",
  state="on") }

[gcode_macro Power_On]
gcode: { action_call_remote_method("set_device_power",
  device="DVES_15946B-5227",
  state="on") }

[gcode_macro PID_Extruder_200]
gcode:  M106
        PID_CALIBRATE HEATER=extruder TARGET=200
        SAVE_CONFIG
        M18

[gcode_macro PID_Extruder_230]
gcode:  M106
        PID_CALIBRATE HEATER=extruder TARGET=230
        SAVE_CONFIG
        M18

[gcode_macro PID_Bed_65]
gcode:  M106
        PID_CALIBRATE HEATER=heater_bed TARGET=65
        SAVE_CONFIG
        M18

[gcode_macro M851]
gcode:
  G28
  probe_calibrate

[gcode_macro G32]
gcode:
  G28
  delta_calibrate
  G1 X0 Y0 F4200
  save_config

[gcode_macro G29]
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z15 F4200
  save_config

[gcode_macro M300]
gcode:
	{% set S = params.S|default(1000)|float %}
	{% set P = params.P|default(100)|float %}
	SET_PIN PIN=BEEPER VALUE=50 CYCLE_TIME={ 1/S }
	G4 P{P}
	SET_PIN PIN=BEEPER VALUE=0

# enable LEDs - in contrast to real M355 we control brightness
# by values between 0.1 and 0.99
[gcode_macro M355]
gcode:
	{% set S = params.S|default(0)|float %}
	SET_PIN PIN=LED VALUE={S} CYCLE_TIME=0.005

[gcode_macro PAdvance_On]
gcode :
  {% set svv = printer.save_variables.variables %}
  {% if svv.pa is defined %}
	{% set PA = svv.pa|float %}
  {% else %}
	{% set PA = 0.25 %}
  {% endif %}
	SET_PRESSURE_ADVANCE advance={ PA }

[gcode_macro PAdvance_Off]
gcode : SET_PRESSURE_ADVANCE advance=0.0

# ************************************************
# * Remove annoying errors from g-code console
# ************************************************

[gcode_macro M108]
gcode:

[gcode_macro M200]
gcode:

[gcode_macro M201]
gcode:

[gcode_macro M203]
gcode:

[gcode_macro M205]
gcode:

[gcode_macro M207]
gcode:

[gcode_macro M300]
gcode:

[gcode_macro M420]
gcode:

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.203
#*# pid_ki = 1.208
#*# pid_kd = 93.029
#*#
#*# [printer]
#*# delta_radius = 109.731250
#*#
#*# [stepper_a]
#*# angle = 211.001060
#*# arm_length = 292.070000
#*# position_endstop = 208.584114
#*#
#*# [stepper_b]
#*# angle = 329.525905
#*# arm_length = 292.070000
#*# position_endstop = 208.414257
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 292.070000
#*# position_endstop = 208.256407
#*#
#*# [delta_calibrate]
#*# height0 = 0.0
#*# height0_pos = 24249.000,24249.000,24249.000
#*# height1 = 0.0
#*# height1_pos = 28083.000,28083.000,21860.000
#*# height2 = 0.0
#*# height2_pos = 23801.000,30089.000,23801.000
#*# height3 = 0.0
#*# height3_pos = 21982.000,27506.000,27506.000
#*# height4 = 0.0
#*# height4_pos = 23616.000,23616.000,28358.000
#*# height5 = 0.0
#*# height5_pos = 26939.000,22097.000,26939.000
#*# height6 = 0.0
#*# height6_pos = 29185.000,23687.000,23687.000
#*#
#*# [bed_mesh bed@25°]
#*# version = 1
#*# points =
#*# 	-0.158991, -0.158991, -0.158991, -0.158991, -0.158991
#*# 	-0.041091, -0.041091, -0.035088, -0.003920, -0.003920
#*# 	-0.018008, -0.043346, 0.014080, -0.000894, -0.003726
#*# 	-0.048041, -0.048041, -0.015013, -0.029402, -0.029402
#*# 	0.004267, 0.004267, 0.004267, 0.004267, 0.004267
#*# tension = 0.2
#*# min_x = -70.0
#*# algo = lagrange
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = -70.0
#*# x_count = 5
#*# max_y = 70.01
#*# mesh_x_pps = 2
#*# max_x = 69.99
#*#
#*# [bed_mesh oldDefaultProfile]
#*# version = 1
#*# points =
#*# 	-0.158991, -0.158991, -0.158991, -0.158991, -0.158991
#*# 	-0.041091, -0.041091, -0.035088, -0.003920, -0.003920
#*# 	-0.018008, -0.043346, 0.014080, -0.000894, -0.003726
#*# 	-0.048041, -0.048041, -0.015013, -0.029402, -0.029402
#*# 	0.004267, 0.004267, 0.004267, 0.004267, 0.004267
#*# tension = 0.2
#*# mesh_x_pps = 2
#*# algo = lagrange
#*# min_x = -70.0
#*# min_y = -70.0
#*# y_count = 5
#*# mesh_y_pps = 2
#*# x_count = 5
#*# max_x = 69.99
#*# max_y = 70.01
