# Klipper printer.cfg for modded FLSUN QQ-S Pro:
#
# 4x TMC2209 drivers in UART mode - wires connected to wifi expansion socket on the FLSUN Hispeed 1.0 Board.
# https://www.youtube.com/watch?v=7ShcFKXrVHo&t=29s&ab_channel=MakerbaseTeam
# https://github.com/Foxies-CSTL/Marlin_2.0.x/tree/FLSUN_QQS-PRO-MULTI/Marlin/Firmwares#31-TMC-with-UART-mode
#
# BMG Extruder clone, mounted to the side of the printer.
#
# Trianglelab Dragon V2 hotend
# https://www.aliexpress.com/item/4000404170721.html?spm=a2g0s.9042311.0.0.5d814c4dJGe2YW
#
# ************************************************************************************
#
# Compiled installation notes*:
#
# Build for the stm32f103 with a 28KiB bootloader. 
# During "make menuconfig" select low-level options and choose USART3
# After building the image, run: "~/klipper/scripts/update_mks_robin.py out/klipper.bin robin_mini.bin
# Then copy the robin_mini.bin file to the printer's SD card to flash it.
#
# If you want to reset the display, it looks like you would add the following to the printer.cfg file:
#  [static_digital_output display_reset]
#  pins: !PC6, !PD13"
#
# *source: https://github.com/KevinOConnor/klipper/issues/2397
#
# ************************************************************************************
[printer]
kinematics: delta
minimum_z_position: -5
max_velocity: 600
max_accel: 3000
max_accel_to_decel: 1500
square_corner_velocity: 5
#delta_radius: 140.8
print_radius: 130 # required for DELTA_CALIBRATE

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
baud: 250000
restart_method: command

# [mcu bluepill]
# serial: None
# baud: 250000

[respond]

[idle_timeout]
timeout: 360

[display_status]

[save_variables]
filename: ~/savedVariablesJake.cfg

# *********************************
# * Enabled additional features
# *********************************
[include kiauh_macros.cfg]

[virtual_sdcard]
path: ~/virtual_sdcard
# path: /mnt/develop/3D-Print/virtual_sdcard/

[gcode_arcs]
resolution: 0.1

[pause_resume]

[endstop_phase]

[static_digital_output display_reset]
pins: !PC6, !PD13

# [adxl345]
# cs_pin: bluepill:None

# [resonance_tester]
# accel_chip: adxl345
# probe_points:
#    0,0,20

# [input_shaper]
# shaper_type_x = 3hump_ei
# shaper_freq_x = 57.6
# shaper_type_y = 3hump_ei
# shaper_freq_y = 61.4

# *********************************
# * Stepper config
# *********************************
#[include tmc2209-stepper.cfg]
[stepper_a]
step_pin: PE3
dir_pin: !PE2
enable_pin: !PE4
endstop_pin: PA15
rotation_distance: 32
microsteps: 16
full_steps_per_rotation: 200
homing_speed: 60
#position_endstop: 374.8     #Delta Calibrate
#arm_length: 280.0           #Delta Calibrate

[tmc2209 stepper_a]
uart_pin: PA10
interpolate: True
run_current: 0.9
stealthchop_threshold: 99999 # only stealthchop

[stepper_b]
step_pin: PE0
dir_pin: !PB9
enable_pin: !PE1
endstop_pin: PA12
rotation_distance: 32
microsteps: 16
full_steps_per_rotation: 200
homing_speed: 60

[tmc2209 stepper_b]
uart_pin: PA9
interpolate: True
run_current: 0.9
stealthchop_threshold: 99999

[stepper_c]
step_pin: PB5
dir_pin: !PB4
enable_pin: !PB8
endstop_pin: PC4
rotation_distance: 32
microsteps: 16
full_steps_per_rotation: 200
homing_speed: 60

[tmc2209 stepper_c]
uart_pin: PC7
interpolate: True
run_current: 0.9
stealthchop_threshold: 99999

# **********************************
# * Extruder config
# **********************************
[include tmc2209-bmg-extruder.cfg]

# ************************************
# * Heater bed & fans config
# ************************************
[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
#control: pid
#pid_Kp: 325.10
#pid_Ki: 63.35
#pid_Kd: 417.10
min_temp: 0
max_temp: 120

[fan]
pin: PB1
kick_start_time: 0.200

# **************************************
# * Probes & Calibration config
# **************************************
[filament_switch_sensor fsensor]
pause_on_runout: False

runout_gcode:
  M118 Filament runout detected.
  M600

insert_gcode:
  G4 P10000
  M701

switch_pin: PA4

[probe]
pin: !PA11
#z_offset: 22.9
speed: 2.5
samples: 5
sample_retract_dist: 2.5
lift_speed: 5
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is average.
samples_result: median
samples_tolerance: 0.1
samples_tolerance_retries: 5

[delta_calibrate]
radius: 120
speed: 20
horizontal_move_z: 25
# manual_probe: false

[bed_mesh]
speed: 50
horizontal_move_z: 25
mesh_radius: 120
mesh_origin: 0,0
round_probe_count: 7
move_check_distance: 10
split_delta_z: .025
fade_start: 1
fade_end: 10
#fade_target: 0.1
algorithm: bicubic
bicubic_tension: 0.2

##[neopixel my_neopixel]
##pin: PC7
#   The pin connected to the neopixel. This parameter must be
#   provided.
##chain_count:1
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
##color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
#initial_RED: 1.0
#initial_GREEN: 0
#initial_BLUE: 0
#initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.

# ************************************************
# * helpers...
# ************************************************
[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro LOAD_MESH_TEMP]
default_parameter_BED_TEMPERATURE: 0
default_parameter_FORCE: 0
gcode:
    {printer.gcode.action_respond_info("- AUTOMATED BED MESH GENERATOR -")}
    {% if BED_TEMPERATURE|int < 30 %}
        {printer.gcode.action_respond_info("Your bed temp is to low, make sure it is at least 30 or higher")}
    {% else %}
        {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 0 %}
            G28 #remove line if you ran G28 before starting this macro
            BED_MESH_PROFILE LOAD={BED_TEMPERATURE}
            {printer.gcode.action_respond_info("Succesfully loaded bed_mesh "+ BED_TEMPERATURE)}
        {% else %}
            {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 1 %}
                BED_MESH_PROFILE REMOVE={BED_TEMPERATURE}
            {% endif %}
            {printer.gcode.action_respond_info("bed_mesh not defined, your bed temperature will go up!")}
            {printer.gcode.action_respond_info("We will probe the bed and save the mesh as bed_mesh "+ BED_TEMPERATURE)}
            ADD_BED_MESH TARGET_TEMP={BED_TEMPERATURE}
        {% endif %}
    {% endif %}

[gcode_macro ADD_BED_MESH]
default_parameter_TARGET_TEMP: 30
gcode:
    M190 S{TARGET_TEMP} # Wait for the bed to hit TARGET_TEMP
    G28 #remove line if you ran G28 before starting this macro
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={TARGET_TEMP}

[gcode_macro PREHEAT_PLA]
gcode:
  M140 S67
  M104 S210

# ***********************************************
# * User implemented g-code macros
# ***********************************************
[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items()
            if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|


# ***********************
# setting for a delta printer
# ***********************
[gcode_macro start_print]
default_parameter_T_TOOL: 195
default_parameter_T_BED: 67
default_parameter_FAN_SPEED: 50
default_parameter_PURGE_OFFSET: 0.5  # distance between purge layers
default_parameter_PURGE_HEIGHT: 0.25 # purge layer height
default_parameter_PURGE_LENGTH: 30   # purge line length

gcode:
  # purge line close to the bed limit
  {% set x1 = printer.toolhead.axis_maximum.x - 1.0  %}
  {% set x2 = x1 - PURGE_OFFSET|float %}

  M117 Starting startup procedure
  M117 Loading mesh
#  BED_MESH_PROFILE LOAD="deltaCalibration"
  { action_respond_info("CLEAR_PAUSE...") }
  CLEAR_PAUSE
  M140 S{T_BED}
  M104 S{T_TOOL}
  M106 S255
  setAbsPos
  M83
  PARK
  M400
  M117 Waiting tool head & bed to heat
  M190 S{T_BED}
  M109 S{T_TOOL}
  M117 Printing tool head prime line 
  G0 X-{x1} Y0 Z{PURGE_HEIGHT} F3600
  M400
  G3 X{x1} Y0 I{x1} J0 E{PURGE_LENGTH}
  M400
  G0 X{x2}
  M400
  G2 X-{x2} Y0 I-{x2} J0 E{PURGE_LENGTH}
  M400
  setRelPos
  G1 E-0.8 Z-0.1 F6000
  G1 X5 E-2 F3000
  G1 E2.5 Z30 F1500
  M106 S{FAN_SPEED}
  M400
  setAbsPos
  M82
  G92 E0
  M117 Starting printing job

# park the nozzle
[gcode_macro PARK]
default_parameter_Z: 0
gcode:
  { action_respond_info("Park: homed axes: [%s]" % (printer.toolhead.homed_axes)) }

  {% if 'z' not in printer.toolhead.homed_axes %}
     M117 Homing print head
     G28
  {% endif %}
  M117 Parking print head
  {% if Z|float>0 %}
     setRelPos
     G1 Z{Z|float}
     setAbsPos
     G1 X-120 Y0 F2000
  {% else %}
     setAbsPos
     G0 X-120 Y0 Z80 F2000
  {% endif %}
  M400

[gcode_macro THE_END]
gcode:
    TURN_OFF_HEATERS    ;turn off heaters... 
    SAVE_GCODE_STATE NAME=END_state
    M83                 ;set relative extrusion
    G92 E0              ;reset extrusion amount
    M204 S10000         ;set max acceleration
    G1 E-2 F4000        ;retract 2mm
    M204 S3000          ;set max acceleration

    ;move the toolhead out of the way
    ;if the tool is less than 30mm away from Z Max, move it to Z max, otherwise, move Z up 30mm
    
    ;Obtain the Z axis limit from the [stepper_z] section of the config file and make
    ;  a decision where to move the Z axis based on the current toolhead 
    {% if printer.toolhead.position.z|float + 30 >= printer.toolhead.axis_maximum.z|float %}
    setAbsPos
    G1 Z{printer.toolhead.axis_maximum.z|float} F1000 ;Move tool
    {% else %}
    setRelPos
    G1 Z30 F1000         ;move Z axis up 30mm
    {% endif %}

    RESTORE_GCODE_STATE NAME=END_state
    G1 X0 Y{printer.toolhead.axis_maximum.y} F24000    ;park tool at back of printer
    M107                
    #UNLOAD_FILAMENT     ;this is a good spot to call an unload 
                         ;filament macro, if you are into that sort of thing
    SET_GCODE_OFFSET Z=0 ;reset whatever babystepping you have done
    M84                  ;disable motors
    CLEAR_PAUSE          ;clear whatever PAUSE state you may have if you have it
    M117 DONE!!!(        ;print a message on your LCD

[gcode_macro M600]
default_parameter_Z: 80
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=7200
  PAUSE
  setRelPos
  G11
  G1 E3.8
  setAbsPos
  PARK Z={printer.toolhead.position.z + Z|float}
  M117 Filament change. Waiting user interaction

[gcode_macro LOAD_FILAMENT]
gcode:
    M701

[gcode_macro M701]
default_parameter_E: 500
gcode:
  M117 Loading filament
  M83
  G1 E{E} F1200
  M106 S255
  M400
  G1 E50 F300
  M400
  G1 E50 F300
  M400
  G11
  G1 E3.8
  M82
  #G92 E0
  M117 Load completed
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M702 

[gcode_macro M702]
default_parameter_E: 500
gcode:
  M117 Unloading filament
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
  M83
  G11
  G1 E-{E} F1200
  M400
  M82
  #G92 E0
  M117 Unload completed
  

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    SDCARD_RESET_FILE
    CLEAR_PAUSE
    BASE_CANCEL_PRINT
    G28

#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.

[pause_resume]
recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

# **********************
# tools....
# **********************

[gcode_macro setAbsPos]
gcode: 
  { action_respond_info("Set to Absolute Positioning...") }
  G90

[gcode_macro setRelPos]
gcode: 
  { action_respond_info("Set to Relative Positioning...") }
  G91


[gcode_macro Power_Off]
gcode: { action_call_remote_method("set_device_power",
  device="DVES_15946B-5227",
  state="on") }

[gcode_macro Power_On]
gcode: { action_call_remote_method("set_device_power",
  device="DVES_15946B-5227",
  state="on") }

[gcode_macro PID_Extruder_200]
gcode:  M106
        PID_CALIBRATE HEATER=extruder TARGET=200
        SAVE_CONFIG
        M18

[gcode_macro PID_Extruder_230]
gcode:  M106
        PID_CALIBRATE HEATER=extruder TARGET=230
        SAVE_CONFIG
        M18

[gcode_macro PID_Bed_65]
gcode:  M106
        PID_CALIBRATE HEATER=heater_bed TARGET=65
        SAVE_CONFIG
        M18

[gcode_macro PresureAdvance_On]
gcode : SET_PRESSURE_ADVANCE advance=0.12

[gcode_macro PresureAdvance_Off]
gcode : SET_PRESSURE_ADVANCE advance=0.0

[gcode_macro zOffset_025]
gcode : SET_GCODE_OFFSET Z_ADJUST=0.25

[gcode_macro M851]
gcode:
  G28
  probe_calibrate

[gcode_macro G32]
gcode:
  G28
  delta_calibrate
  G1 X0 Y0 F4200
  save_config

[gcode_macro G29]
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z15 F4200
  save_config

# ************************************************
# * Remove annoying errors from g-code console
# ************************************************

[gcode_macro M108]
gcode:

[gcode_macro M200]
gcode:

[gcode_macro M201]
gcode:

[gcode_macro M203]
gcode:

[gcode_macro M205]
gcode:

[gcode_macro M207]
gcode:

[gcode_macro M300]
gcode:

[gcode_macro M420]
gcode:

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 24.015
#*# pid_ki = 1.455
#*# pid_kd = 99.061
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 68.915
#*# pid_ki = 1.860
#*# pid_kd = 638.325
#*#
#*# [printer]
#*# delta_radius = 140.650156
#*#
#*# [stepper_a]
#*# angle = 210.759379
#*# arm_length = 280.000000
#*# position_endstop = 374.419105
#*#
#*# [stepper_b]
#*# angle = 329.937750
#*# arm_length = 280.000000
#*# position_endstop = 374.737204
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 280.000000
#*# position_endstop = 374.126495
#*#
#*# [probe]
#*# z_offset = 22.100
#*#
#*# [delta_calibrate]
#*# height0 = 22.1
#*# height0_pos = 35230.000,35256.000,35200.000
#*# height1 = 22.1
#*# height1_pos = 42339.000,42274.000,31530.000
#*# height2 = 22.1
#*# height2_pos = 34596.000,46616.000,34498.000
#*# height3 = 22.1
#*# height3_pos = 31698.000,41047.000,41000.000
#*# height4 = 22.1
#*# height4_pos = 34238.000,34310.000,42725.000
#*# height5 = 22.1
#*# height5_pos = 39903.000,31918.000,39945.000
#*# height6 = 22.1
#*# height6_pos = 44500.000,34413.000,34350.000
