# Klipper printer.cfg for modded FLSUN QQ-S Pro:
#
# 4x TMC2209 drivers in UART mode - wires connected to wifi expansion socket on the FLSUN Hispeed 1.0 Board.
# https://www.youtube.com/watch?v=7ShcFKXrVHo&t=29s&ab_channel=MakerbaseTeam
# https://github.com/Foxies-CSTL/Marlin_2.0.x/tree/FLSUN_QQS-PRO-MULTI/Marlin/Firmwares#31-TMC-with-UART-mode
#
# BMG Extruder clone, mounted to the side of the printer.
#
# Trianglelab Dragon V2 hotend
# https://www.aliexpress.com/item/4000404170721.html?spm=a2g0s.9042311.0.0.5d814c4dJGe2YW
#
# ************************************************************************************
#
# Compiled installation notes*:
#
# Build for the stm32f103 with a 28KiB bootloader.
# During "make menuconfig" select low-level options and choose USART3
# After building the image, run: "~/klipper/scripts/update_mks_robin.py out/klipper.bin robin_mini.bin
# Then copy the robin_mini.bin file to the printer's SD card to flash it.
#
# If you want to reset the display, it looks like you would add the following to the printer.cfg file:
#  [static_digital_output display_reset]
#  pins: !PC6, !PD13"
#
# *source: https://github.com/KevinOConnor/klipper/issues/2397
#
# ************************************************************************************
[save_variables]
filename: /home/debian/klipper_config/printer_1/savedVariables.cfg

[printer]
kinematics: delta
minimum_z_position: -5
max_velocity: 500
max_accel: 3000
max_accel_to_decel: 3000
square_corner_velocity: 5
delta_radius: 140.8
print_radius: 120 # required for DELTA_CALIBRATE

[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
baud: 250000
restart_method: command

# [mcu bluepill]
#[include adxl345.cfg]
[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 27.2
shaper_type_y = mzv
shaper_freq_y = 29.2

[respond]

[idle_timeout]
timeout: 360

[display_status]

# *********************************
# * Enabled additional features
# *********************************
# [include kiauh_macros.cfg]

[virtual_sdcard]
path: ~/virtual_sdcard
# path: /mnt/develop/3D-Print/virtual_sdcard/

[gcode_arcs]
resolution: 0.1

[pause_resume]

[endstop_phase]

[static_digital_output display_reset]
pins: !PC6, !PD13

# *********************************
# * Stepper config
# *********************************
[stepper_a]
step_pin: PE3
dir_pin: !PE2
enable_pin: !PE4
endstop_pin: PA15
rotation_distance: 32
microsteps: 16
full_steps_per_rotation: 200
homing_speed: 60
# settings for Haydn Huntley MagBall + Stud bridge
position_endstop: 334
arm_length: 304.13    # Haydn Huntley

[stepper_b]
step_pin: PE0
dir_pin: !PB9
enable_pin: !PE1
endstop_pin: PA12
rotation_distance: 32
microsteps: 16
full_steps_per_rotation: 200
homing_speed: 60

[stepper_c]
step_pin: PB5
dir_pin: !PB4
enable_pin: !PB8
endstop_pin: PC4
rotation_distance: 32
microsteps: 16
full_steps_per_rotation: 200
homing_speed: 60

[include tmc2209-stepper.cfg]

# **********************************
# * Extruder config
# **********************************
[include tmc2209-bmg-extruder.cfg]

# ************************************
# * Heater bed & fans config
# ************************************
[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
#control: pid
#pid_Kp: 325.10
#pid_Ki: 63.35
#pid_Kd: 417.10
min_temp: 0
max_temp: 135

[fan]
pin: PB1
kick_start_time: 0.200

# **************************************
# * Probes & Calibration config
# **************************************
[filament_switch_sensor fsensor]
pause_on_runout: False
switch_pin: PA4
runout_gcode:
  M118 Filament runout detected.
  M600
insert_gcode:
  G4 P10000
  M701

[probe]
pin: !PA11
#z_offset: 20
speed: 2.5
samples: 5
sample_retract_dist: 2.5
lift_speed: 5
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is average.
samples_result: median
samples_tolerance: 0.1
samples_tolerance_retries: 5

[delta_calibrate]
radius: 75
speed: 20
horizontal_move_z: 25
# manual_probe: false

[bed_mesh]
speed: 50
horizontal_move_z: 25
mesh_radius: 75
mesh_origin: 0,0
round_probe_count: 3
move_check_distance: 10
split_delta_z: .025
fade_start: 1
fade_end: 10
#fade_target: 0.1
algorithm: bicubic
bicubic_tension: 0.2

# ************************************************
# * helpers...
# ************************************************
# example for default parameter handling
# [gcode_macro SET_BED_TEMPERATURE]
# gcode:
#   {% set bed_temp = params.TEMPERATURE|default(40)|float %}
#   M140 S{bed_temp}

### Macros
[gcode_macro PRINT_STR]
gcode:
  M117 {params.STR}
  { action_respond_info(params.STR) }

# --- 
# keep mainsail happy...
[gcode_macro PAUSE]
rename_existing: BUILDIN_PAUSE
gcode:
  BUILDIN_PAUSE

[gcode_macro RESUME]
rename_existing: BUILDIN_RESUME
gcode:
  BUILDIN_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BUILDIN_CANCEL_PRINT
gcode:
  M220 S100 ; Reset Speed factor override percentage to default (100%)
  M221 S100 ; Reset Extrude factor override percentage to default (100%)
  SAVE_GCODE_STATE NAME=CANCEL_PRINT_state
  G91 ; Set coordinates to relative
  {% if printer.extruder.temperature >= 170 %}
    G92 E0       ; Reset extruder
    G1 F1200 E-1 ; Retract filament 3 mm to prevent oozing
  {% endif %}

  ;if all axis are homed, lift the hotend to leave room for hot filament to ooze and to keep it clear of the bed.
  {% if printer.toolhead.homed_axes == "xyz" %}
    G1 F6000 Z10 ; Move Z Axis up 10 mm to allow filament ooze freely
    M84 ; Disable stepper motors
  {% endif %}
  RESTORE_GCODE_STATE NAME=CANCEL_PRINT_state
  M106 S0  ;set part fan speed to zero.
  ;bed and hotend are left at the print temps in case I want to restart.
  SET_PIN PIN=LED VALUE=0.5

[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro LOAD_MESH_TEMP]
gcode:
  {% set BED_TEMPERATURE = params.BED_TEMPERATURE|default(0)|float %}
  {% set FORCE = params.FORCE|default(0)|float %}
    {printer.gcode.action_respond_info("- AUTOMATED BED MESH GENERATOR -")}
    {% if BED_TEMPERATURE|int < 30 %}
        {printer.gcode.action_respond_info("Your bed temp is to low, make sure it is at least 30 or higher")}
    {% else %}
        {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 0 %}
            G28 #remove line if you ran G28 before starting this macro
            BED_MESH_PROFILE LOAD={BED_TEMPERATURE}
            {printer.gcode.action_respond_info("Succesfully loaded bed_mesh "+ BED_TEMPERATURE)}
        {% else %}
            {% if printer.configfile.config["bed_mesh " + BED_TEMPERATURE] is defined and FORCE|int == 1 %}
                BED_MESH_PROFILE REMOVE={BED_TEMPERATURE}
            {% endif %}
            {printer.gcode.action_respond_info("bed_mesh not defined, your bed temperature will go up!")}
            {printer.gcode.action_respond_info("We will probe the bed and save the mesh as bed_mesh "+ BED_TEMPERATURE)}
            ADD_BED_MESH TARGET_TEMP={BED_TEMPERATURE}
        {% endif %}
    {% endif %}

[gcode_macro ADD_BED_MESH]
gcode:
    {% set TARGET_TEMP = params.TARGET_TEMP|default(30)|float %}
    M190 S{TARGET_TEMP} # Wait for the bed to hit TARGET_TEMP
    G28 #remove line if you ran G28 before starting this macro
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE SAVE={TARGET_TEMP}

[gcode_macro PREHEAT]
gcode:
    {% set T_BED = params.T_BED|default(0)|float %}
    {% set T_TOOL = params.T_TOOL|default(200)|float %}
    {% if T_BED > 20.0 %}
      PRINT_STR STR="PREHEAT T_BED={T_BED}"
      M190 S{T_BED}
      PRINT_STR STR="execute: HEAT_SOAK DURATION={ T_BED * 2 }"
      HEAT_SOAK DURATION={ T_BED * 2 }
    {% endif %}
    PRINT_STR STR="PREHEAT T_TOOL={T_TOOL}"
    M109 S{T_TOOL}

[gcode_macro PREHEAT_PLA]
gcode:
    PREHEAT T_BED=65 T_TOOL=210

[gcode_macro PREHEAT_PETG]
gcode:
    PREHEAT T_BED=70 T_TOOL=230

# ***********************************************
# * User implemented g-code macros
# ***********************************************
[gcode_macro SET_GCODE_OFFSET]
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %}
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}

    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}

    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
        { action_respond_info("Loading gcode offsets from saved variables [%s]" % (offsets)) }
        _SET_GCODE_OFFSET {% for axis, offset in offsets.items()
            if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
    {% endif %}|


# ***********************
# setting for a delta printer
# ***********************
[gcode_macro START_PRINT]
gcode:
  {% set T_TOOL = params.T_TOOL|default(200)|float %}
  {% set T_BED = params.T_BED|default(65)|float %}
  {% set FAN_SPEED = params.FAN_SPEED|default(25)|float %}
  {% set PRIMELINE = params.PRIMELINE|default(0)|float %}

  UPDATE_DELAYED_GCODE ID=LOAD_GCODE_OFFSETS DURATION=0.1
  SAVE_GCODE_STATE NAME=START_state
  PRINT_STR STR="startup procedure"
  SET_PIN PIN=LED VALUE=0.5
# PRINT_STR STR="loading mesh"
# BED_MESH_PROFILE LOAD="deltaCalibration"
  PRINT_STR STR="heating..."
  CLEAR_PAUSE
  M140 S{T_BED}
  M106 S255     ; run cooling fans at full power
  PARK
  PREHEAT T_BED={T_BED} T_TOOL={T_TOOL}
  {%if PRIMELINE > 0 %}
    PRIME_LINE
  {% endif %}
  PRINT_STR STR="drop a blob"
  G90
  G0 Z0.25
  G91     ; relative mode
  G1 E-0.8 Z-0.1 F6000
  G1 X5 E-2 F3000
  G1 E2.5 Z30 F1500
  M106 S{FAN_SPEED}

  RESTORE_GCODE_STATE NAME=START_state
  SET_PIN PIN=LED VALUE=1.0
  PRINT_STR STR="start printing"

# HEAT_SOAK and companions - heated bed temp distribution
[gcode_macro HEAT_SOAK]
gcode:
  {% set DURATION = params.DURATION|default(180)|float %}
  PRINT_STR STR="HEAT_SOAK DURATION={DURATION}s"
  UPDATE_DELAYED_GCODE ID=SOAK_TIME DURATION={DURATION}  ; resume after DURATION seconds
  BUILDIN_PAUSE
  M117

[gcode_macro SKIP_HEAT_SOAK]
gcode:
  UPDATE_DELAYED_GCODE ID=SOAK_TIME DURATION=0.1

[delayed_gcode SOAK_TIME]
gcode:
  BUILDIN_RESUME
  M107    ; turn off cooling fans

# print an ARC prime line (Delta, eliptic printbed)
# Parameter:
#   HEIGHT: layer height
#   DISTANCE: distance to bed border
#   OFFSET: distance between the two prime lines
#   LENGTH: total purge amount (mm)
#
[gcode_macro PRIME_LINE]
gcode:
  {% set PURGE_HEIGHT = params.HEIGHT|default(0.25)|float %}
  {% set PURGE_DIST = params.DISTANCE|default(5)|float %}
  {% set PURGE_OFFSET = params.OFFSET|default(0.5)|float %}
  {% set PURGE_LENGTH = params.LENGTH|default(30)|float %}

  {% set x1 = printer.toolhead.axis_maximum.x - PURGE_DIST  %}
  {% set x2 = x1 - PURGE_OFFSET %}

  SAVE_GCODE_STATE NAME=PRIME_LINE_state
  PRINT_STR STR="Printing prime line"

  G92 E0
  G0 X-{x1} Y0 Z{PURGE_HEIGHT} F3600
  G3 X{x1} Y0 I{x1} J0 E{PURGE_LENGTH / 2}
  G0 X{x2}
  G2 X-{x2} Y0 I-{x2} J0 E{PURGE_LENGTH / 2}

  RESTORE_GCODE_STATE NAME=PRIME_LINE_state

# park the nozzle
[gcode_macro PARK]
gcode:
  {% set X = printer.toolhead.axis_maximum.x * 0.95  %}
  {% set Z = params.Z|default(0)|float %}

  SAVE_GCODE_STATE NAME=PARK_state
  PRINT_STR STR="Park: homed axes: [{printer.toolhead.homed_axes}]"
  {% if 'z' not in printer.toolhead.homed_axes %}
     M117 Homing print head
     G28
  {% endif %}
  M117 Parking print head
  {% if Z|float>0 %}
     setRelPos
     G1 Z{Z|float}
     setAbsPos
     G1 X-{X} Y0 F2000
  {% else %}
     setAbsPos
     G0 X-{X} Y0 Z80 F2000
  {% endif %}
  RESTORE_GCODE_STATE NAME=PARK_state
  M400

[gcode_macro END_PRINT]
gcode:
  THE_END

[gcode_macro THE_END]
gcode:
    TURN_OFF_HEATERS    ;turn off heaters...
    SAVE_GCODE_STATE NAME=END_state
    M83                 ;set relative extrusion
    G92 E0              ;reset extrusion amount
    M204 S10000         ;set max acceleration
    G1 E-2 F4000        ;retract 2mm
    M204 S3000          ;set max acceleration

    ;move the toolhead out of the way
    ;if the tool is less than 30mm away from Z Max, move it to Z max, otherwise, move Z up 30mm

    ;Obtain the Z axis limit from the [stepper_z] section of the config file and make
    ;  a decision where to move the Z axis based on the current toolhead
    {% if printer.toolhead.position.z|float + 30 >= printer.toolhead.axis_maximum.z|float %}
    setAbsPos
    G1 Z{printer.toolhead.axis_maximum.z|float} F1000 ;Move tool
    {% else %}
    setRelPos
    G1 Z30 F1000         ;move Z axis up 30mm
    {% endif %}

    RESTORE_GCODE_STATE NAME=END_state
    G1 X0 Y{printer.toolhead.axis_maximum.y} F24000    ;park tool at back of printer
    M107
    #UNLOAD_FILAMENT     ;this is a good spot to call an unload
                         ;filament macro, if you are into that sort of thing
    # SET_GCODE_OFFSET Z=0 ;reset whatever babystepping you have done
    M84                  ;disable motors
    CLEAR_PAUSE          ;clear whatever PAUSE state you may have if you have it
    M117 DONE!!!         ;print a message on your LCD
    SET_PIN PIN=LED VALUE=0.0

[gcode_macro M600]
default_parameter_Z: 80
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=7200
  PAUSE
  setRelPos
  G11
  G1 E3.8
  setAbsPos
  PARK Z={printer.toolhead.position.z + Z|float}
  M117 Filament change. Waiting user interaction

[gcode_macro LOAD_FILAMENT]
gcode:
    M701

[gcode_macro M701]
default_parameter_E: 500
gcode:
  M117 Loading filament
  M83
  G1 E{E} F1200
  M106 S255
  M400
  G1 E50 F300
  M400
  G1 E50 F300
  M400
  G11
  G1 E3.8
  M82
  #G92 E0
  M117 Load completed
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M702

[gcode_macro M702]
default_parameter_E: 500
gcode:
  M117 Unloading filament
  SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
  M83
  G11
  G1 E-{E} F1200
  M400
  M82
  #G92 E0
  M117 Unload completed


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  { action_respond_info("CANCEL_PRINT") }
    TURN_OFF_HEATERS
    SDCARD_RESET_FILE
    CLEAR_PAUSE
    BASE_CANCEL_PRINT
    G28

#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.

[pause_resume]
recover_velocity: 50.
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

# **********************
# tools....
# **********************

[gcode_macro setAbsPos]
gcode:
  { action_respond_info("Set to Absolute Positioning...") }
  G90

[gcode_macro setRelPos]
gcode:
  { action_respond_info("Set to Relative Positioning...") }
  G91

[gcode_macro Power_Off]
gcode: { action_call_remote_method("set_device_power",
  device="DVES_15946B-5227",
  state="on") }

[gcode_macro Power_On]
gcode: { action_call_remote_method("set_device_power",
  device="DVES_15946B-5227",
  state="on") }

[gcode_macro PID_Extruder_200]
gcode:  M106
        PID_CALIBRATE HEATER=extruder TARGET=200
        SAVE_CONFIG
        M18

[gcode_macro PID_Extruder_230]
gcode:  M106
        PID_CALIBRATE HEATER=extruder TARGET=230
        SAVE_CONFIG
        M18

[gcode_macro PID_Bed_65]
gcode:  M106
        PID_CALIBRATE HEATER=heater_bed TARGET=65
        SAVE_CONFIG
        M18

[gcode_macro M851]
gcode:
  G28
  probe_calibrate

[gcode_macro G32]
gcode:
  G28
  delta_calibrate
  G1 X0 Y0 F4200
  save_config

[gcode_macro G29]
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z15 F4200
  save_config

[gcode_macro M300]
gcode:
	{% set S = params.S|default(1000)|float %}
	{% set P = params.P|default(100)|float %}
	SET_PIN PIN=BEEPER VALUE=50 CYCLE_TIME={ 1/S }
	G4 P{P}
	SET_PIN PIN=BEEPER VALUE=0

# enable LEDs - in contrast to real M355 we control brightness
# by values between 0.1 and 0.99
[gcode_macro M355]
gcode:
	{% set S = params.S|default(0)|float %}
	SET_PIN PIN=LED VALUE={S} CYCLE_TIME=0.005

[gcode_macro zoffset]
gcode: SET_GCODE_OFFSET Z=0.065

[gcode_macro PAdvance_On]
gcode : 
	{% set PA = params.PA|default(0)|float %}
	SET_PRESSURE_ADVANCE advance=0.2  # PETG

[gcode_macro PAdvance_Off]
gcode : SET_PRESSURE_ADVANCE advance=0.0

# ************************************************
# * Remove annoying errors from g-code console
# ************************************************

[gcode_macro M108]
gcode:

[gcode_macro M200]
gcode:

[gcode_macro M201]
gcode:

[gcode_macro M203]
gcode:

[gcode_macro M205]
gcode:

[gcode_macro M207]
gcode:

[gcode_macro M300]
gcode:

[gcode_macro M420]
gcode:

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 24.015
#*# pid_ki = 1.455
#*# pid_kd = 99.061
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 71.764
#*# pid_ki = 2.267
#*# pid_kd = 567.829
#*#
#*# [probe]
#*# z_offset = 22.000
#*#
